struct node
{
int data;
struct node *next;
};

// insert begin
void beginsert()
(
struct node *ptr:
int item;
ptr = (struct node *) malloc(sizeof(struct node *));
if(ptr == NULL)
printf("\nOVERFLOW");
}

else

printf("\nEnter value\n");

scanf("%d",&item);

ptr->data = item;

ptr->next = head;

head = ptr:

printf("\nNode inserted");

}

// insert end

void lastinsert()

struct node *ptr, temp;

int item;

ptr = (struct node*)malloc(sizeof(struct node));

if(ptr == NULL)
{
  printf("\nOVERFLOW");
}
else
}
printf("\nEnter value?\n");

scanf("%d",&item);

ptr->data = item:
if(head == NULL)

{

ptr ->next = NULL;

head = ptr;

printf("\nNode inserted");

}

else

{

temp = head;

while (temp -> next != NULL)

temp = temp -> next:

}

temp->next = ptr:

ptr->next = NULL;

printf("\nNode inserted");
}
}
}
}

//insert random
void randominsert0

{

int i,loc,item;

struct node *ptr, *temp;

ptr = (struct node *) malloc (sizeof(struct node));

if(ptr == NULL)

printf("\nOVERFLOW");

}

else

4

printf("\nEnter element value");

scanf("%d",&item);

ptr->data = item:

printf("\nEnter the location after which you want to insert ");

scanf("\n%d",&place);

temp-head:
for(i=0;i<loci++)

temp = temp->next;

if(temp == NULL)

printf("\ncan't insert\n");

return;

}

}

ptr ->next = temp ->next;

temp->next = ptr;
printf("\nNode inserted");
}
void begin_delete()

(

struct node *ptr:

if(head == NULL)

printf("\nList is empty\n");

}

else

ptr= head;

head = ptr->next:

free(ptr):

printf("\nNode deleted from the begining...\n");

}

}

// delete last
void last_delete()

struct node *ptr,*ptr1;

if(head == NULL)

}

printf("\nlist is empty");

}

else if(head->next == NULL)

head = NULL;

free(head);

printf("\nOnly node of the list deleted...\n");

}
else

ptr = head;

while(ptr->next!= NULL)

ptr1 = ptr;

ptr = ptr ->next;

}

ptr1->next = NULL;

free(ptr);

printf("\nDeleted Node from the last ...\n");

}
}

// random delete
void random_delete()

struct node *ptr.*ptr1:

int loc.i;

printf("\n Enter the location of the node after which you want to perform deletion \n"); scanf("%d", &loc);

ptr=head:

for(i=0;i<loci++)

ptr1 = ptr;

ptr = ptr->next:

if(ptr == NULL)

printf("\nCan't delete");

return;
}}

ptrl->next = ptr ->next:

free(ptr):

printf("\nDeleted node d "loc+ 1):
}
}



// display
void display0

struct node *ptr;

ptr= head;

if(ptr == NULL)

printf("Nothing to print"):

}

else

printf("\nprinting values.....\n"); while (ptr!= NULL)

( printf("\n%d", ptr->data); ptr = ptr -> next;

}


}

}

